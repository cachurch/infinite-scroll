"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const exceptions_1 = require("../../exceptions");
const enums_1 = require("../../enums");
const DEFAULT_STRATEGY = enums_1.StrategiesEnum.Manual;
class ArgumentParser {
    constructor() {
        this.environmentRegex = /^[A-z]{1,255}$/m;
        this.flagRegex = /^(\-([fme]))?$/m;
    }
    parse(args) {
        args = args.slice(2);
        if (args.length > 2) {
            throw new exceptions_1.InvalidArgumentsException();
        }
        const environment = this.fetchEnvironment(args);
        const strategy = this.fetchStrategy(args);
        if (args.length) {
            throw new exceptions_1.InvalidArgumentsException();
        }
        return {
            environment,
            strategy,
        };
    }
    fetchStrategy(data) {
        if (data[0]) {
            const first = this.parseFlag(data[0]);
            if (first) {
                data.shift();
                return first;
            }
        }
        return DEFAULT_STRATEGY;
    }
    fetchEnvironment(data) {
        if (data[0]) {
            const first = this.parseEnvironment(data[0]);
            if (first) {
                data.shift();
                return first;
            }
            if (data.length <= 1) {
                return process.env['NODE_ENV'];
            }
        }
        if (data[1]) {
            const last = this.parseEnvironment(data[1]);
            if (last) {
                data.pop();
                return last;
            }
        }
        return process.env['NODE_ENV'];
    }
    parseEnvironment(value) {
        const match = value.match(this.environmentRegex);
        if (!match || !match.length) {
            return null;
        }
        return match[0];
    }
    parseFlag(value) {
        const match = value.match(this.flagRegex);
        if (!match || !match.length) {
            return null;
        }
        return match[2];
    }
}
exports.ArgumentParser = ArgumentParser;
//# sourceMappingURL=argument.parser.js.map
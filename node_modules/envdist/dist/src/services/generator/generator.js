"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const file_manager_1 = require("../file-manager");
const parser_1 = require("../parser");
exports.DEFAULT_DIST = '.env.dist';
exports.DEFAULT_PATH = '.';
exports.DEFAULT_PATTERN = '.env';
exports.ENV_VAR = 'NODE_ENV';
class Generator {
    constructor(strategy) {
        this.strategy = strategy;
        this.existentVariables = [];
        this.fileManager = new file_manager_1.FileManager();
        this.envParser = new parser_1.EnvParser();
    }
    getStrategy() {
        return this.strategy;
    }
    async generate(settings, args) {
        if (Array.isArray(settings.ignore) && settings.ignore.includes(process.env[exports.ENV_VAR])) {
            return;
        }
        const currentPath = path.resolve(process.cwd(), settings.path || exports.DEFAULT_PATH);
        const distFile = settings.dist || exports.DEFAULT_DIST;
        const fullFileName = path.resolve(currentPath, distFile);
        const lines = this.fileManager.read(fullFileName);
        let env = args.environment || process.env[exports.ENV_VAR] || '';
        const outputFilename = (settings.pattern || exports.DEFAULT_PATTERN).replace('*', env);
        if (this.fileManager.exist(currentPath, outputFilename)) {
            this.existentVariables = this.fileManager.read(path.resolve(currentPath, outputFilename))
                .map(line => this.envParser.parseEnv(line))
                .filter(variable => !!variable);
        }
        let content = '';
        for (const line of lines) {
            const variable = this.envParser.parseDist(line);
            if (!variable) {
                content += `${line}\n`;
                continue;
            }
            const existentVar = this.getExistentVariable(variable);
            if (existentVar) {
                const envLine = `${existentVar.name} = ${existentVar.value}`.trim();
                content += `${envLine}\n`;
                continue;
            }
            if (variable.name === exports.ENV_VAR) {
                env = env || variable.default || '';
                content += `${exports.ENV_VAR} = ${env}\n`;
                continue;
            }
            const value = await this.strategy.generate(variable);
            content += `${value}\n`;
        }
        this.fileManager.save(currentPath, outputFilename, content);
    }
    getExistentVariable(variable) {
        const result = this.existentVariables.filter(v => v.name === variable.name);
        return result.length === 1 ? result[0] : null;
    }
}
exports.Generator = Generator;
//# sourceMappingURL=generator.js.map